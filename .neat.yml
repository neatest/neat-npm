ignore: yarn.lock

symlink:
  - .github/workflows/npm.yml: actions/npm.yml
  - README.md: README.tpl.md

pre-run:
  - script: |
      // Use current dir as default for NPM package name
      process.env.NEAT_ASK_NPM_NAME = process.cwd().match(/\/([^/]*)$/)[1]

ask:
  - id: target_environment
    description: What environment is your package targeting?
    default:
      - Node.js: true
      - Browser: true
      - Vue.js: false
      - React: false
  - id: language
    description: Which language(s) do you want to use? (sticking with one is easier to maintain)
    default:
      - Typescript: true
      - Javascript: false
  - id: npm-builds
    description: On which operating systems do you want to test your build?
    replace: true
    default:
      - ubuntu-latest: true
      - windows-latest: true
      - macos-latest: true
  - id: package_name
    description: What is the name of your NPM package? (in the format 'name' or '@scope/name')
    replace: true
  - id: package_description
    replace: true
  - id: author_name
    replace: true
  - id: author_email
    replace: true
  - id: author_website
    replace: true
  - id: repository_name
    description: What is the name of your repository (in the format owner/repo)?
    replace: true

post-run:
  - yarn add -D @babel/cli @babel/core @babel/plugin-transform-runtime @babel/preset-env babel-eslint eslint@6.x eslint-config-prettier eslint-plugin-babel eslint-plugin-import eslint-plugin-jest eslint-plugin-node eslint-plugin-prettier jest prettier
  - script: |
      const added_files = process.env.NEAT_ADDED_FILES
      const environment = process.env.NEAT_ASK_TARGET_ENVIRONMENT
      const language = process.env.NEAT_ASK_LANGUAGE

      // Edit package.json
      if (/package\.json/i.test(added_files) && fs.existsSync('package.json')) {
        const pkg = JSON.parse(fs.readFileSync('package.json'))

        if (fs.existsSync('./docs')) pkg.directories.doc = './docs'

        if (
          /browser/i.test(environment) ||
          /vue\.js/i.test(environment) ||
          /react/i.test(environment)
        ) {
          pkg.jest.testURL = 'http://localhost'
        }

        if (!/node\.js/i.test(environment)) {
          delete pkg.devDependencies['eslint-plugin-node']
        }

        if (!/vue\.js/i.test(environment)) {
          delete pkg.devDependencies['eslint-plugin-vue']
          delete pkg.devDependencies['@vue/babel-preset-app']
        }

        if (!/react/i.test(environment)) {
          delete pkg.devDependencies['eslint-plugin-react']
          delete pkg.devDependencies['@babel/preset-react']
        }

        if (
          /node\.js/i.test(environment) &&
          (/browser/i.test(environment) ||
            /vue\.js/i.test(environment) ||
            /react/i.test(environment))
        ) {
          delete pkg.jest.testEnvironment
          pkg.jest.projects = [
            { displayName: 'browser', testEnvironment: 'jsdom' },
            { displayName: 'node', testEnvironment: 'node' },
          ]
        }

        if (!/typescript/i.test(language)) {
          fs.unlinkSync('tsconfig.json')
          delete pkg.devDependencies['@babel/plugin-proposal-class-properties']
          delete pkg.devDependencies['@babel/plugin-proposal-object-rest-spread']
          delete pkg.devDependencies['@babel/preset-typescript']
          delete pkg.devDependencies['@types/jest']
          delete pkg.devDependencies['@typescript-eslint/eslint-plugin']
          delete pkg.devDependencies['@typescript-eslint/parser']
          delete pkg.devDependencies['typescript']
          delete pkg.dependencies['@types/node']
          delete pkg.dependencies['tslib']
          delete pkg.scripts['type-check']
          delete pkg.scripts['type-check:watch']
          delete pkg.scripts['build:types']

          pkg.scripts['build'] = pkg.scripts['build:js'].replace('.ts,.tsx,', '')
          delete pkg.scripts['build:js']

          pkg.scripts['test'] = pkg.scripts['test'].replace(
            'yarn run type-check && ',
            ''
          )
          pkg.scripts['watch'] = pkg.scripts['watch'].replace('build:js', 'build')
        }

        fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2))
      }

      // Edit .babelrc
      if (/\.babelrc/i.test(added_files) && fs.existsSync('.babelrc')) {
        const babel = JSON.parse(fs.readFileSync('.babelrc'))

        if (!/typescript/i.test(language)) {
          let index = babel.presets.indexOf('@babel/preset-typescript')
          if (index > -1) babel.presets.splice(index, 1)

          index = babel.plugins.indexOf('@babel/proposal-class-properties')
          if (index > -1) babel.plugins.splice(index, 1)

          index = babel.plugins.indexOf('@babel/proposal-object-rest-spread')
          if (index > -1) babel.plugins.splice(index, 1)
        }

        if (!/javascript/i.test(language)) {
          let index = babel.plugins.indexOf([
            '@babel/plugin-transform-runtime',
            { regenerator: true },
          ])
          if (index > -1) babel.plugins.splice(index, 1)
        }

        if (!/vue\.js/i.test(environment)) {
          let index = babel.presets.indexOf('@vue/babel-preset-app')
          if (index > -1) babel.presets.splice(index, 1)
        }

        if (!/react/i.test(environment)) {
          let index = babel.presets.indexOf('@babel/preset-react')
          if (index > -1) babel.presets.splice(index, 1)
        }

        fs.writeFileSync('.babelrc', JSON.stringify(babel, null, 2))
      }

      // Edit .eslintrc
      if (/\.eslintrc/i.test(added_files) && fs.existsSync('.eslintrc')) {
        const eslint = JSON.parse(fs.readFileSync('.eslintrc'))

        if (
          !/browser/i.test(environment) &&
          !/vue\.js/i.test(environment) &&
          !/react/i.test(environment)
        ) {
          eslint.env.browser = false
        }

        if (!/node\.js/i.test(environment)) {
          eslint.env.node = false

          let index = eslint.extends.indexOf('plugin:node/recommended')
          if (index > -1) eslint.extends.splice(index, 1)
          index = eslint.overrides[0].extends.indexOf('plugin:node/recommended')
          if (index > -1) eslint.overrides[0].extends.splice(index, 1)

          index = eslint.plugins.indexOf('node')
          if (index > -1) eslint.extends.splice(index, 1)

          delete eslint.rules['node/no-unsupported-features/es-syntax']
          delete eslint.rules['node/no-unsupported-features/es-builtins']
          delete eslint.rules['node/no-extraneous-import']
          delete eslint.overrides[0].rules['node/no-unsupported-features/es-syntax']
          delete eslint.overrides[0].rules['node/no-unsupported-features/es-builtins']
          delete eslint.overrides[0].rules['node/no-extraneous-import']

          delete eslint.overrides[0].settings
        }

        if (!/vue\.js/i.test(environment)) {
          let index = eslint.extends.indexOf('prettier/vue')
          if (index > -1) eslint.extends.splice(index, 1)
          index = eslint.overrides[0].extends.indexOf('prettier/vue')
          if (index > -1) eslint.overrides[0].extends.splice(index, 1)
        }

        if (!/react/i.test(environment)) {
          let index = eslint.extends.indexOf('prettier/react')
          if (index > -1) eslint.extends.splice(index, 1)
          index = eslint.overrides[0].extends.indexOf('prettier/react')
          if (index > -1) eslint.overrides[0].extends.splice(index, 1)
        }

        if (/typescript/i.test(language) && !/javascript/i.test(language)) {
          const ts = eslint.overrides[0]
          eslint.parser = ts.parser
          eslint.parserOptions = ts.parserOptions
          eslint.extends = ts.extends
          eslint.settings = ts.settings
          eslint.rules = ts.rules
          delete eslint.overrides
        } else if (!/typescript/i.test(language) && /javascript/i.test(language)) {
          delete eslint.overrides
        }

        fs.writeFileSync('.eslintrc', JSON.stringify(eslint, null, 2))
      }
  - yarn install
